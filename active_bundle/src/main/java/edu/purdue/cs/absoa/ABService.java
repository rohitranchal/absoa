/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.purdue.cs.absoa;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ABService {

  public interface Iface {

    public String authenticateChallenge() throws org.apache.thrift.TException;

    public ABObject authenticateResponse(String challenge, String signedChallenge, String certificate) throws org.apache.thrift.TException;

    public String getValue(String sessionKey, String dataKey) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void authenticateChallenge(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void authenticateResponse(String challenge, String signedChallenge, String certificate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getValue(String sessionKey, String dataKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String authenticateChallenge() throws org.apache.thrift.TException
    {
      send_authenticateChallenge();
      return recv_authenticateChallenge();
    }

    public void send_authenticateChallenge() throws org.apache.thrift.TException
    {
      authenticateChallenge_args args = new authenticateChallenge_args();
      sendBase("authenticateChallenge", args);
    }

    public String recv_authenticateChallenge() throws org.apache.thrift.TException
    {
      authenticateChallenge_result result = new authenticateChallenge_result();
      receiveBase(result, "authenticateChallenge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authenticateChallenge failed: unknown result");
    }

    public ABObject authenticateResponse(String challenge, String signedChallenge, String certificate) throws org.apache.thrift.TException
    {
      send_authenticateResponse(challenge, signedChallenge, certificate);
      return recv_authenticateResponse();
    }

    public void send_authenticateResponse(String challenge, String signedChallenge, String certificate) throws org.apache.thrift.TException
    {
      authenticateResponse_args args = new authenticateResponse_args();
      args.setChallenge(challenge);
      args.setSignedChallenge(signedChallenge);
      args.setCertificate(certificate);
      sendBase("authenticateResponse", args);
    }

    public ABObject recv_authenticateResponse() throws org.apache.thrift.TException
    {
      authenticateResponse_result result = new authenticateResponse_result();
      receiveBase(result, "authenticateResponse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authenticateResponse failed: unknown result");
    }

    public String getValue(String sessionKey, String dataKey) throws org.apache.thrift.TException
    {
      send_getValue(sessionKey, dataKey);
      return recv_getValue();
    }

    public void send_getValue(String sessionKey, String dataKey) throws org.apache.thrift.TException
    {
      getValue_args args = new getValue_args();
      args.setSessionKey(sessionKey);
      args.setDataKey(dataKey);
      sendBase("getValue", args);
    }

    public String recv_getValue() throws org.apache.thrift.TException
    {
      getValue_result result = new getValue_result();
      receiveBase(result, "getValue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getValue failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void authenticateChallenge(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authenticateChallenge_call method_call = new authenticateChallenge_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticateChallenge_call extends org.apache.thrift.async.TAsyncMethodCall {
      public authenticateChallenge_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticateChallenge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticateChallenge_args args = new authenticateChallenge_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticateChallenge();
      }
    }

    public void authenticateResponse(String challenge, String signedChallenge, String certificate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authenticateResponse_call method_call = new authenticateResponse_call(challenge, signedChallenge, certificate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticateResponse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String challenge;
      private String signedChallenge;
      private String certificate;
      public authenticateResponse_call(String challenge, String signedChallenge, String certificate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.challenge = challenge;
        this.signedChallenge = signedChallenge;
        this.certificate = certificate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticateResponse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticateResponse_args args = new authenticateResponse_args();
        args.setChallenge(challenge);
        args.setSignedChallenge(signedChallenge);
        args.setCertificate(certificate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ABObject getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticateResponse();
      }
    }

    public void getValue(String sessionKey, String dataKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getValue_call method_call = new getValue_call(sessionKey, dataKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getValue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionKey;
      private String dataKey;
      public getValue_call(String sessionKey, String dataKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionKey = sessionKey;
        this.dataKey = dataKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getValue_args args = new getValue_args();
        args.setSessionKey(sessionKey);
        args.setDataKey(dataKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getValue();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("authenticateChallenge", new authenticateChallenge());
      processMap.put("authenticateResponse", new authenticateResponse());
      processMap.put("getValue", new getValue());
      return processMap;
    }

    public static class authenticateChallenge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticateChallenge_args> {
      public authenticateChallenge() {
        super("authenticateChallenge");
      }

      public authenticateChallenge_args getEmptyArgsInstance() {
        return new authenticateChallenge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticateChallenge_result getResult(I iface, authenticateChallenge_args args) throws org.apache.thrift.TException {
        authenticateChallenge_result result = new authenticateChallenge_result();
        result.success = iface.authenticateChallenge();
        return result;
      }
    }

    public static class authenticateResponse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticateResponse_args> {
      public authenticateResponse() {
        super("authenticateResponse");
      }

      public authenticateResponse_args getEmptyArgsInstance() {
        return new authenticateResponse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticateResponse_result getResult(I iface, authenticateResponse_args args) throws org.apache.thrift.TException {
        authenticateResponse_result result = new authenticateResponse_result();
        result.success = iface.authenticateResponse(args.challenge, args.signedChallenge, args.certificate);
        return result;
      }
    }

    public static class getValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getValue_args> {
      public getValue() {
        super("getValue");
      }

      public getValue_args getEmptyArgsInstance() {
        return new getValue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getValue_result getResult(I iface, getValue_args args) throws org.apache.thrift.TException {
        getValue_result result = new getValue_result();
        result.success = iface.getValue(args.sessionKey, args.dataKey);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("authenticateChallenge", new authenticateChallenge());
      processMap.put("authenticateResponse", new authenticateResponse());
      processMap.put("getValue", new getValue());
      return processMap;
    }

    public static class authenticateChallenge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authenticateChallenge_args, String> {
      public authenticateChallenge() {
        super("authenticateChallenge");
      }

      public authenticateChallenge_args getEmptyArgsInstance() {
        return new authenticateChallenge_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            authenticateChallenge_result result = new authenticateChallenge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authenticateChallenge_result result = new authenticateChallenge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authenticateChallenge_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.authenticateChallenge(resultHandler);
      }
    }

    public static class authenticateResponse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authenticateResponse_args, ABObject> {
      public authenticateResponse() {
        super("authenticateResponse");
      }

      public authenticateResponse_args getEmptyArgsInstance() {
        return new authenticateResponse_args();
      }

      public AsyncMethodCallback<ABObject> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ABObject>() { 
          public void onComplete(ABObject o) {
            authenticateResponse_result result = new authenticateResponse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authenticateResponse_result result = new authenticateResponse_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authenticateResponse_args args, org.apache.thrift.async.AsyncMethodCallback<ABObject> resultHandler) throws TException {
        iface.authenticateResponse(args.challenge, args.signedChallenge, args.certificate,resultHandler);
      }
    }

    public static class getValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getValue_args, String> {
      public getValue() {
        super("getValue");
      }

      public getValue_args getEmptyArgsInstance() {
        return new getValue_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getValue_result result = new getValue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getValue_result result = new getValue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getValue_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getValue(args.sessionKey, args.dataKey,resultHandler);
      }
    }

  }

  public static class authenticateChallenge_args implements org.apache.thrift.TBase<authenticateChallenge_args, authenticateChallenge_args._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateChallenge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateChallenge_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateChallenge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateChallenge_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateChallenge_args.class, metaDataMap);
    }

    public authenticateChallenge_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateChallenge_args(authenticateChallenge_args other) {
    }

    public authenticateChallenge_args deepCopy() {
      return new authenticateChallenge_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateChallenge_args)
        return this.equals((authenticateChallenge_args)that);
      return false;
    }

    public boolean equals(authenticateChallenge_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(authenticateChallenge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateChallenge_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateChallenge_argsStandardSchemeFactory implements SchemeFactory {
      public authenticateChallenge_argsStandardScheme getScheme() {
        return new authenticateChallenge_argsStandardScheme();
      }
    }

    private static class authenticateChallenge_argsStandardScheme extends StandardScheme<authenticateChallenge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateChallenge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateChallenge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateChallenge_argsTupleSchemeFactory implements SchemeFactory {
      public authenticateChallenge_argsTupleScheme getScheme() {
        return new authenticateChallenge_argsTupleScheme();
      }
    }

    private static class authenticateChallenge_argsTupleScheme extends TupleScheme<authenticateChallenge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateChallenge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateChallenge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class authenticateChallenge_result implements org.apache.thrift.TBase<authenticateChallenge_result, authenticateChallenge_result._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateChallenge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateChallenge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateChallenge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateChallenge_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateChallenge_result.class, metaDataMap);
    }

    public authenticateChallenge_result() {
    }

    public authenticateChallenge_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateChallenge_result(authenticateChallenge_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public authenticateChallenge_result deepCopy() {
      return new authenticateChallenge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public authenticateChallenge_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateChallenge_result)
        return this.equals((authenticateChallenge_result)that);
      return false;
    }

    public boolean equals(authenticateChallenge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(authenticateChallenge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateChallenge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateChallenge_resultStandardSchemeFactory implements SchemeFactory {
      public authenticateChallenge_resultStandardScheme getScheme() {
        return new authenticateChallenge_resultStandardScheme();
      }
    }

    private static class authenticateChallenge_resultStandardScheme extends StandardScheme<authenticateChallenge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateChallenge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateChallenge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateChallenge_resultTupleSchemeFactory implements SchemeFactory {
      public authenticateChallenge_resultTupleScheme getScheme() {
        return new authenticateChallenge_resultTupleScheme();
      }
    }

    private static class authenticateChallenge_resultTupleScheme extends TupleScheme<authenticateChallenge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateChallenge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateChallenge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class authenticateResponse_args implements org.apache.thrift.TBase<authenticateResponse_args, authenticateResponse_args._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateResponse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateResponse_args");

    private static final org.apache.thrift.protocol.TField CHALLENGE_FIELD_DESC = new org.apache.thrift.protocol.TField("challenge", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SIGNED_CHALLENGE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedChallenge", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CERTIFICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("certificate", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateResponse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateResponse_argsTupleSchemeFactory());
    }

    public String challenge; // required
    public String signedChallenge; // required
    public String certificate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHALLENGE((short)1, "challenge"),
      SIGNED_CHALLENGE((short)2, "signedChallenge"),
      CERTIFICATE((short)3, "certificate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHALLENGE
            return CHALLENGE;
          case 2: // SIGNED_CHALLENGE
            return SIGNED_CHALLENGE;
          case 3: // CERTIFICATE
            return CERTIFICATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHALLENGE, new org.apache.thrift.meta_data.FieldMetaData("challenge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIGNED_CHALLENGE, new org.apache.thrift.meta_data.FieldMetaData("signedChallenge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CERTIFICATE, new org.apache.thrift.meta_data.FieldMetaData("certificate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateResponse_args.class, metaDataMap);
    }

    public authenticateResponse_args() {
    }

    public authenticateResponse_args(
      String challenge,
      String signedChallenge,
      String certificate)
    {
      this();
      this.challenge = challenge;
      this.signedChallenge = signedChallenge;
      this.certificate = certificate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateResponse_args(authenticateResponse_args other) {
      if (other.isSetChallenge()) {
        this.challenge = other.challenge;
      }
      if (other.isSetSignedChallenge()) {
        this.signedChallenge = other.signedChallenge;
      }
      if (other.isSetCertificate()) {
        this.certificate = other.certificate;
      }
    }

    public authenticateResponse_args deepCopy() {
      return new authenticateResponse_args(this);
    }

    @Override
    public void clear() {
      this.challenge = null;
      this.signedChallenge = null;
      this.certificate = null;
    }

    public String getChallenge() {
      return this.challenge;
    }

    public authenticateResponse_args setChallenge(String challenge) {
      this.challenge = challenge;
      return this;
    }

    public void unsetChallenge() {
      this.challenge = null;
    }

    /** Returns true if field challenge is set (has been assigned a value) and false otherwise */
    public boolean isSetChallenge() {
      return this.challenge != null;
    }

    public void setChallengeIsSet(boolean value) {
      if (!value) {
        this.challenge = null;
      }
    }

    public String getSignedChallenge() {
      return this.signedChallenge;
    }

    public authenticateResponse_args setSignedChallenge(String signedChallenge) {
      this.signedChallenge = signedChallenge;
      return this;
    }

    public void unsetSignedChallenge() {
      this.signedChallenge = null;
    }

    /** Returns true if field signedChallenge is set (has been assigned a value) and false otherwise */
    public boolean isSetSignedChallenge() {
      return this.signedChallenge != null;
    }

    public void setSignedChallengeIsSet(boolean value) {
      if (!value) {
        this.signedChallenge = null;
      }
    }

    public String getCertificate() {
      return this.certificate;
    }

    public authenticateResponse_args setCertificate(String certificate) {
      this.certificate = certificate;
      return this;
    }

    public void unsetCertificate() {
      this.certificate = null;
    }

    /** Returns true if field certificate is set (has been assigned a value) and false otherwise */
    public boolean isSetCertificate() {
      return this.certificate != null;
    }

    public void setCertificateIsSet(boolean value) {
      if (!value) {
        this.certificate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHALLENGE:
        if (value == null) {
          unsetChallenge();
        } else {
          setChallenge((String)value);
        }
        break;

      case SIGNED_CHALLENGE:
        if (value == null) {
          unsetSignedChallenge();
        } else {
          setSignedChallenge((String)value);
        }
        break;

      case CERTIFICATE:
        if (value == null) {
          unsetCertificate();
        } else {
          setCertificate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHALLENGE:
        return getChallenge();

      case SIGNED_CHALLENGE:
        return getSignedChallenge();

      case CERTIFICATE:
        return getCertificate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHALLENGE:
        return isSetChallenge();
      case SIGNED_CHALLENGE:
        return isSetSignedChallenge();
      case CERTIFICATE:
        return isSetCertificate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateResponse_args)
        return this.equals((authenticateResponse_args)that);
      return false;
    }

    public boolean equals(authenticateResponse_args that) {
      if (that == null)
        return false;

      boolean this_present_challenge = true && this.isSetChallenge();
      boolean that_present_challenge = true && that.isSetChallenge();
      if (this_present_challenge || that_present_challenge) {
        if (!(this_present_challenge && that_present_challenge))
          return false;
        if (!this.challenge.equals(that.challenge))
          return false;
      }

      boolean this_present_signedChallenge = true && this.isSetSignedChallenge();
      boolean that_present_signedChallenge = true && that.isSetSignedChallenge();
      if (this_present_signedChallenge || that_present_signedChallenge) {
        if (!(this_present_signedChallenge && that_present_signedChallenge))
          return false;
        if (!this.signedChallenge.equals(that.signedChallenge))
          return false;
      }

      boolean this_present_certificate = true && this.isSetCertificate();
      boolean that_present_certificate = true && that.isSetCertificate();
      if (this_present_certificate || that_present_certificate) {
        if (!(this_present_certificate && that_present_certificate))
          return false;
        if (!this.certificate.equals(that.certificate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(authenticateResponse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChallenge()).compareTo(other.isSetChallenge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChallenge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.challenge, other.challenge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSignedChallenge()).compareTo(other.isSetSignedChallenge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSignedChallenge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedChallenge, other.signedChallenge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCertificate()).compareTo(other.isSetCertificate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCertificate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificate, other.certificate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateResponse_args(");
      boolean first = true;

      sb.append("challenge:");
      if (this.challenge == null) {
        sb.append("null");
      } else {
        sb.append(this.challenge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("signedChallenge:");
      if (this.signedChallenge == null) {
        sb.append("null");
      } else {
        sb.append(this.signedChallenge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("certificate:");
      if (this.certificate == null) {
        sb.append("null");
      } else {
        sb.append(this.certificate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateResponse_argsStandardSchemeFactory implements SchemeFactory {
      public authenticateResponse_argsStandardScheme getScheme() {
        return new authenticateResponse_argsStandardScheme();
      }
    }

    private static class authenticateResponse_argsStandardScheme extends StandardScheme<authenticateResponse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateResponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHALLENGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.challenge = iprot.readString();
                struct.setChallengeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIGNED_CHALLENGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.signedChallenge = iprot.readString();
                struct.setSignedChallengeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CERTIFICATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.certificate = iprot.readString();
                struct.setCertificateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateResponse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.challenge != null) {
          oprot.writeFieldBegin(CHALLENGE_FIELD_DESC);
          oprot.writeString(struct.challenge);
          oprot.writeFieldEnd();
        }
        if (struct.signedChallenge != null) {
          oprot.writeFieldBegin(SIGNED_CHALLENGE_FIELD_DESC);
          oprot.writeString(struct.signedChallenge);
          oprot.writeFieldEnd();
        }
        if (struct.certificate != null) {
          oprot.writeFieldBegin(CERTIFICATE_FIELD_DESC);
          oprot.writeString(struct.certificate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateResponse_argsTupleSchemeFactory implements SchemeFactory {
      public authenticateResponse_argsTupleScheme getScheme() {
        return new authenticateResponse_argsTupleScheme();
      }
    }

    private static class authenticateResponse_argsTupleScheme extends TupleScheme<authenticateResponse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateResponse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChallenge()) {
          optionals.set(0);
        }
        if (struct.isSetSignedChallenge()) {
          optionals.set(1);
        }
        if (struct.isSetCertificate()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetChallenge()) {
          oprot.writeString(struct.challenge);
        }
        if (struct.isSetSignedChallenge()) {
          oprot.writeString(struct.signedChallenge);
        }
        if (struct.isSetCertificate()) {
          oprot.writeString(struct.certificate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateResponse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.challenge = iprot.readString();
          struct.setChallengeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.signedChallenge = iprot.readString();
          struct.setSignedChallengeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.certificate = iprot.readString();
          struct.setCertificateIsSet(true);
        }
      }
    }

  }

  public static class authenticateResponse_result implements org.apache.thrift.TBase<authenticateResponse_result, authenticateResponse_result._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateResponse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateResponse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateResponse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateResponse_resultTupleSchemeFactory());
    }

    public ABObject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ABObject.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateResponse_result.class, metaDataMap);
    }

    public authenticateResponse_result() {
    }

    public authenticateResponse_result(
      ABObject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateResponse_result(authenticateResponse_result other) {
      if (other.isSetSuccess()) {
        this.success = new ABObject(other.success);
      }
    }

    public authenticateResponse_result deepCopy() {
      return new authenticateResponse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ABObject getSuccess() {
      return this.success;
    }

    public authenticateResponse_result setSuccess(ABObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ABObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateResponse_result)
        return this.equals((authenticateResponse_result)that);
      return false;
    }

    public boolean equals(authenticateResponse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(authenticateResponse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateResponse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateResponse_resultStandardSchemeFactory implements SchemeFactory {
      public authenticateResponse_resultStandardScheme getScheme() {
        return new authenticateResponse_resultStandardScheme();
      }
    }

    private static class authenticateResponse_resultStandardScheme extends StandardScheme<authenticateResponse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateResponse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ABObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateResponse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateResponse_resultTupleSchemeFactory implements SchemeFactory {
      public authenticateResponse_resultTupleScheme getScheme() {
        return new authenticateResponse_resultTupleScheme();
      }
    }

    private static class authenticateResponse_resultTupleScheme extends TupleScheme<authenticateResponse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateResponse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateResponse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ABObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getValue_args implements org.apache.thrift.TBase<getValue_args, getValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getValue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getValue_args");

    private static final org.apache.thrift.protocol.TField SESSION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("dataKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getValue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getValue_argsTupleSchemeFactory());
    }

    public String sessionKey; // required
    public String dataKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_KEY((short)1, "sessionKey"),
      DATA_KEY((short)2, "dataKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_KEY
            return SESSION_KEY;
          case 2: // DATA_KEY
            return DATA_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_KEY, new org.apache.thrift.meta_data.FieldMetaData("sessionKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_KEY, new org.apache.thrift.meta_data.FieldMetaData("dataKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getValue_args.class, metaDataMap);
    }

    public getValue_args() {
    }

    public getValue_args(
      String sessionKey,
      String dataKey)
    {
      this();
      this.sessionKey = sessionKey;
      this.dataKey = dataKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValue_args(getValue_args other) {
      if (other.isSetSessionKey()) {
        this.sessionKey = other.sessionKey;
      }
      if (other.isSetDataKey()) {
        this.dataKey = other.dataKey;
      }
    }

    public getValue_args deepCopy() {
      return new getValue_args(this);
    }

    @Override
    public void clear() {
      this.sessionKey = null;
      this.dataKey = null;
    }

    public String getSessionKey() {
      return this.sessionKey;
    }

    public getValue_args setSessionKey(String sessionKey) {
      this.sessionKey = sessionKey;
      return this;
    }

    public void unsetSessionKey() {
      this.sessionKey = null;
    }

    /** Returns true if field sessionKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionKey() {
      return this.sessionKey != null;
    }

    public void setSessionKeyIsSet(boolean value) {
      if (!value) {
        this.sessionKey = null;
      }
    }

    public String getDataKey() {
      return this.dataKey;
    }

    public getValue_args setDataKey(String dataKey) {
      this.dataKey = dataKey;
      return this;
    }

    public void unsetDataKey() {
      this.dataKey = null;
    }

    /** Returns true if field dataKey is set (has been assigned a value) and false otherwise */
    public boolean isSetDataKey() {
      return this.dataKey != null;
    }

    public void setDataKeyIsSet(boolean value) {
      if (!value) {
        this.dataKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_KEY:
        if (value == null) {
          unsetSessionKey();
        } else {
          setSessionKey((String)value);
        }
        break;

      case DATA_KEY:
        if (value == null) {
          unsetDataKey();
        } else {
          setDataKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_KEY:
        return getSessionKey();

      case DATA_KEY:
        return getDataKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_KEY:
        return isSetSessionKey();
      case DATA_KEY:
        return isSetDataKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValue_args)
        return this.equals((getValue_args)that);
      return false;
    }

    public boolean equals(getValue_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionKey = true && this.isSetSessionKey();
      boolean that_present_sessionKey = true && that.isSetSessionKey();
      if (this_present_sessionKey || that_present_sessionKey) {
        if (!(this_present_sessionKey && that_present_sessionKey))
          return false;
        if (!this.sessionKey.equals(that.sessionKey))
          return false;
      }

      boolean this_present_dataKey = true && this.isSetDataKey();
      boolean that_present_dataKey = true && that.isSetDataKey();
      if (this_present_dataKey || that_present_dataKey) {
        if (!(this_present_dataKey && that_present_dataKey))
          return false;
        if (!this.dataKey.equals(that.dataKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getValue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionKey()).compareTo(other.isSetSessionKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionKey, other.sessionKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataKey()).compareTo(other.isSetDataKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataKey, other.dataKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValue_args(");
      boolean first = true;

      sb.append("sessionKey:");
      if (this.sessionKey == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataKey:");
      if (this.dataKey == null) {
        sb.append("null");
      } else {
        sb.append(this.dataKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getValue_argsStandardSchemeFactory implements SchemeFactory {
      public getValue_argsStandardScheme getScheme() {
        return new getValue_argsStandardScheme();
      }
    }

    private static class getValue_argsStandardScheme extends StandardScheme<getValue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getValue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionKey = iprot.readString();
                struct.setSessionKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataKey = iprot.readString();
                struct.setDataKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getValue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionKey != null) {
          oprot.writeFieldBegin(SESSION_KEY_FIELD_DESC);
          oprot.writeString(struct.sessionKey);
          oprot.writeFieldEnd();
        }
        if (struct.dataKey != null) {
          oprot.writeFieldBegin(DATA_KEY_FIELD_DESC);
          oprot.writeString(struct.dataKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getValue_argsTupleSchemeFactory implements SchemeFactory {
      public getValue_argsTupleScheme getScheme() {
        return new getValue_argsTupleScheme();
      }
    }

    private static class getValue_argsTupleScheme extends TupleScheme<getValue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionKey()) {
          optionals.set(0);
        }
        if (struct.isSetDataKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionKey()) {
          oprot.writeString(struct.sessionKey);
        }
        if (struct.isSetDataKey()) {
          oprot.writeString(struct.dataKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getValue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionKey = iprot.readString();
          struct.setSessionKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataKey = iprot.readString();
          struct.setDataKeyIsSet(true);
        }
      }
    }

  }

  public static class getValue_result implements org.apache.thrift.TBase<getValue_result, getValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getValue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getValue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getValue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getValue_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getValue_result.class, metaDataMap);
    }

    public getValue_result() {
    }

    public getValue_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValue_result(getValue_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getValue_result deepCopy() {
      return new getValue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getValue_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValue_result)
        return this.equals((getValue_result)that);
      return false;
    }

    public boolean equals(getValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getValue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getValue_resultStandardSchemeFactory implements SchemeFactory {
      public getValue_resultStandardScheme getScheme() {
        return new getValue_resultStandardScheme();
      }
    }

    private static class getValue_resultStandardScheme extends StandardScheme<getValue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getValue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getValue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getValue_resultTupleSchemeFactory implements SchemeFactory {
      public getValue_resultTupleScheme getScheme() {
        return new getValue_resultTupleScheme();
      }
    }

    private static class getValue_resultTupleScheme extends TupleScheme<getValue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getValue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
