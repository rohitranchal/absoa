//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ABObject = module.exports.ABObject = function(args) {
  this.sessionID = null;
  this.sessionKey = null;
  if (args) {
    if (args.sessionID !== undefined) {
      this.sessionID = args.sessionID;
    }
    if (args.sessionKey !== undefined) {
      this.sessionKey = args.sessionKey;
    }
  }
};
ABObject.prototype = {};
ABObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABObject.prototype.write = function(output) {
  output.writeStructBegin('ABObject');
  if (this.sessionID !== null && this.sessionID !== undefined) {
    output.writeFieldBegin('sessionID', Thrift.Type.STRING, 1);
    output.writeString(this.sessionID);
    output.writeFieldEnd();
  }
  if (this.sessionKey !== null && this.sessionKey !== undefined) {
    output.writeFieldBegin('sessionKey', Thrift.Type.STRING, 2);
    output.writeString(this.sessionKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABSLA = module.exports.ABSLA = function(args) {
  this.activeTime = null;
  this.expirationTime = null;
  this.numRequests = null;
  if (args) {
    if (args.activeTime !== undefined) {
      this.activeTime = args.activeTime;
    }
    if (args.expirationTime !== undefined) {
      this.expirationTime = args.expirationTime;
    }
    if (args.numRequests !== undefined) {
      this.numRequests = args.numRequests;
    }
  }
};
ABSLA.prototype = {};
ABSLA.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.activeTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expirationTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRequests = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABSLA.prototype.write = function(output) {
  output.writeStructBegin('ABSLA');
  if (this.activeTime !== null && this.activeTime !== undefined) {
    output.writeFieldBegin('activeTime', Thrift.Type.I32, 1);
    output.writeI32(this.activeTime);
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.STRING, 2);
    output.writeString(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.numRequests !== null && this.numRequests !== undefined) {
    output.writeFieldBegin('numRequests', Thrift.Type.I32, 3);
    output.writeI32(this.numRequests);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

