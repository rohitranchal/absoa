//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./ActiveBundle_types');
//HELPER FUNCTIONS AND STRUCTURES

ABService_authenticateChallenge_args = function(args) {
};
ABService_authenticateChallenge_args.prototype = {};
ABService_authenticateChallenge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABService_authenticateChallenge_args.prototype.write = function(output) {
  output.writeStructBegin('ABService_authenticateChallenge_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABService_authenticateChallenge_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ABService_authenticateChallenge_result.prototype = {};
ABService_authenticateChallenge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABService_authenticateChallenge_result.prototype.write = function(output) {
  output.writeStructBegin('ABService_authenticateChallenge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABService_authenticateResponse_args = function(args) {
  this.challenge = null;
  this.signedChallenge = null;
  this.certificate = null;
  if (args) {
    if (args.challenge !== undefined) {
      this.challenge = args.challenge;
    }
    if (args.signedChallenge !== undefined) {
      this.signedChallenge = args.signedChallenge;
    }
    if (args.certificate !== undefined) {
      this.certificate = args.certificate;
    }
  }
};
ABService_authenticateResponse_args.prototype = {};
ABService_authenticateResponse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.challenge = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.signedChallenge = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABService_authenticateResponse_args.prototype.write = function(output) {
  output.writeStructBegin('ABService_authenticateResponse_args');
  if (this.challenge !== null && this.challenge !== undefined) {
    output.writeFieldBegin('challenge', Thrift.Type.STRING, 1);
    output.writeString(this.challenge);
    output.writeFieldEnd();
  }
  if (this.signedChallenge !== null && this.signedChallenge !== undefined) {
    output.writeFieldBegin('signedChallenge', Thrift.Type.STRING, 2);
    output.writeString(this.signedChallenge);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 3);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABService_authenticateResponse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ABService_authenticateResponse_result.prototype = {};
ABService_authenticateResponse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ABObject();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABService_authenticateResponse_result.prototype.write = function(output) {
  output.writeStructBegin('ABService_authenticateResponse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABService_getValue_args = function(args) {
  this.sessionKey = null;
  this.dataKey = null;
  if (args) {
    if (args.sessionKey !== undefined) {
      this.sessionKey = args.sessionKey;
    }
    if (args.dataKey !== undefined) {
      this.dataKey = args.dataKey;
    }
  }
};
ABService_getValue_args.prototype = {};
ABService_getValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dataKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABService_getValue_args.prototype.write = function(output) {
  output.writeStructBegin('ABService_getValue_args');
  if (this.sessionKey !== null && this.sessionKey !== undefined) {
    output.writeFieldBegin('sessionKey', Thrift.Type.STRING, 1);
    output.writeString(this.sessionKey);
    output.writeFieldEnd();
  }
  if (this.dataKey !== null && this.dataKey !== undefined) {
    output.writeFieldBegin('dataKey', Thrift.Type.STRING, 2);
    output.writeString(this.dataKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABService_getValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ABService_getValue_result.prototype = {};
ABService_getValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABService_getValue_result.prototype.write = function(output) {
  output.writeStructBegin('ABService_getValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABService_getSLA_args = function(args) {
};
ABService_getSLA_args.prototype = {};
ABService_getSLA_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABService_getSLA_args.prototype.write = function(output) {
  output.writeStructBegin('ABService_getSLA_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABService_getSLA_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ABService_getSLA_result.prototype = {};
ABService_getSLA_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ABSLA();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ABService_getSLA_result.prototype.write = function(output) {
  output.writeStructBegin('ABService_getSLA_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ABServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ABServiceClient.prototype = {};
ABServiceClient.prototype.authenticateChallenge = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_authenticateChallenge();
};

ABServiceClient.prototype.send_authenticateChallenge = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticateChallenge', Thrift.MessageType.CALL, this.seqid);
  var args = new ABService_authenticateChallenge_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ABServiceClient.prototype.recv_authenticateChallenge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ABService_authenticateChallenge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticateChallenge failed: unknown result');
};
ABServiceClient.prototype.authenticateResponse = function(challenge, signedChallenge, certificate, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_authenticateResponse(challenge, signedChallenge, certificate);
};

ABServiceClient.prototype.send_authenticateResponse = function(challenge, signedChallenge, certificate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticateResponse', Thrift.MessageType.CALL, this.seqid);
  var args = new ABService_authenticateResponse_args();
  args.challenge = challenge;
  args.signedChallenge = signedChallenge;
  args.certificate = certificate;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ABServiceClient.prototype.recv_authenticateResponse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ABService_authenticateResponse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticateResponse failed: unknown result');
};
ABServiceClient.prototype.getValue = function(sessionKey, dataKey, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getValue(sessionKey, dataKey);
};

ABServiceClient.prototype.send_getValue = function(sessionKey, dataKey) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getValue', Thrift.MessageType.CALL, this.seqid);
  var args = new ABService_getValue_args();
  args.sessionKey = sessionKey;
  args.dataKey = dataKey;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ABServiceClient.prototype.recv_getValue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ABService_getValue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getValue failed: unknown result');
};
ABServiceClient.prototype.getSLA = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSLA();
};

ABServiceClient.prototype.send_getSLA = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSLA', Thrift.MessageType.CALL, this.seqid);
  var args = new ABService_getSLA_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ABServiceClient.prototype.recv_getSLA = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ABService_getSLA_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSLA failed: unknown result');
};
ABServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ABServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ABServiceProcessor.prototype.process_authenticateChallenge = function(seqid, input, output) {
  var args = new ABService_authenticateChallenge_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.authenticateChallenge(function (err, result) {
    var result = new ABService_authenticateChallenge_result((err != null ? err : {success: result}));
    output.writeMessageBegin("authenticateChallenge", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ABServiceProcessor.prototype.process_authenticateResponse = function(seqid, input, output) {
  var args = new ABService_authenticateResponse_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.authenticateResponse(args.challenge, args.signedChallenge, args.certificate, function (err, result) {
    var result = new ABService_authenticateResponse_result((err != null ? err : {success: result}));
    output.writeMessageBegin("authenticateResponse", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ABServiceProcessor.prototype.process_getValue = function(seqid, input, output) {
  var args = new ABService_getValue_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getValue(args.sessionKey, args.dataKey, function (err, result) {
    var result = new ABService_getValue_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getValue", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ABServiceProcessor.prototype.process_getSLA = function(seqid, input, output) {
  var args = new ABService_getSLA_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getSLA(function (err, result) {
    var result = new ABService_getSLA_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getSLA", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

